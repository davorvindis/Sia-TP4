import matplotlib.pyplot as plt
import numpy as np
import copy

letra_a = [-1, -1, 1, -1, -1 , -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1]
letra_b = [-1, 1, 1, -1, -1, -1, 1,	-1, 1, -1, -1, 1, 1, -1, -1, -1, 1,	-1,	1, -1, -1, 1, 1, -1, -1]
letra_c = [-1, -1, 1, 1, -1, -1, 1, -1,	-1,	-1,	-1,	1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1]
letra_d = [-1, 1, 1, -1, -1, -1, 1, -1,	1, -1, -1, 1, -1, 1, -1, -1, 1, -1,	1, -1, -1, 1, 1, -1, -1]
letra_e = [-1, 1, 1, 1, -1,	-1,	1, -1, -1, -1, -1, 1, 1, 1, -1,	-1,	1, -1, -1, -1, -1, 1, 1, 1,	-1]
letra_f = [-1, 1, 1, 1,	-1,	-1,	1, -1, -1, -1, -1, 1, 1, 1,	-1,	-1,	1, -1, -1, -1, -1, 1, -1, -1, -1]
letra_g = [-1,	-1,	1,	1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	-1,	1,	-1,	-1]
letra_h = [-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1]
letra_i = [-1,	1,	1,	1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	1,	1,	1,	-1]
letra_j = np.array([[-1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, -1]])
letra_k = [-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1]
letra_l = [-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	1,	1,	-1]
letra_m = [-1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1]
letra_n = [-1,	1, 1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1]
letra_o = [-1,	-1,	1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	-1,	1,	-1,	-1]
letra_p = np.array([[-1,	1,	1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1]])
letra_q = [-1,	-1,	1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	-1,	1,	1	,1]
letra_r = [-1,	1,	1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1]
letra_s = [-1,	-1,	1,	1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	1,	1,	-1,	-1]
letra_t = np.array([[-1,	1,	1,	1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1]])
letra_u = [-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1	,1,	1	,-1]
letra_v = [-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	-1	,1,	-1,	-1]
letra_w = np.array([[1,	-1,	1,	-1,	1,	1,	-1,	1,	-1,	1,	1,	-1,	1,	-1,	1,	1,	-1,	1,	-1,	1,	-1,	1	,-1,	1,	-1]])
letra_x = [-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1	,-1,	1,	-1]
letra_y = [-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	-1,	1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	1	,1,	1,	-1]
letra_z = [-1,	1,	1, 1, -1, -1,	-1,	-1,	1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	1,	1,	-1]

mi_letra_o =  np.array([[1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1]])
mi_letra_f =  np.array([[-1, 1, 1, 1, -1,-1,1,-1,-1,1,-1,1,1,-1,-1,-1,1,-1,-1,-1,1,1,-1,-1,-1]])
mi_letra_j =  np.array([[-1,1,1,1,1,-1,-1,-1,1,-1,1,-1,-1,1,-1,-1,1,-1,1,-1,-1,1,1,1,-1]])
mi_letra_t =  np.array([[1,	1,	1,	1,	1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1]])

letras = [[-1, -1, 1, -1, -1 , -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1],
          [-1, 1, 1, -1, -1, -1, 1,	-1, 1, -1, -1, 1, 1, -1, -1, -1, 1,	-1,	1, -1, -1, 1, 1, -1, -1],
          [-1, -1, 1, 1, -1, -1, 1, -1,	-1,	-1,	-1,	1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1],
          [-1, 1, 1, -1, -1, -1, 1, -1,	1, -1, -1, 1, -1, 1, -1, -1, 1, -1,	1, -1, -1, 1, 1, -1, -1],
          [-1, 1, 1, 1, -1,	-1,	1, -1, -1, -1, -1, 1, 1, 1, -1,	-1,	1, -1, -1, -1, -1, 1, 1, 1,	-1],
          [-1, 1, 1, 1,	-1,	-1,	1, -1, -1, -1, -1, 1, 1, 1,	-1,	-1,	1, -1, -1, -1, -1, 1, -1, -1, -1],
          [-1,	-1,	1,	1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	-1,	1,	-1,	-1],
          [-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1],
          [-1,	1,	1,	1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	1,	1,	1,	-1],
          [-1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, -1],
          [-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1],
          [-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	1,	1,	-1],
          [-1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1],
          [-1,	1, 1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1],
          [-1,	-1,	1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	-1,	1,	-1,	-1],
          [-1,	1,	1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1],
          [-1,	-1,	1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	-1,	1,	1	,1],
          [-1,	1,	1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1],
          [-1,	-1,	1,	1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	1,	1,	-1,	-1],
          [-1,	1,	1,	1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1],
          [-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1	,1,	1	,-1],
          [-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	-1	,1,	-1,	-1],
          [1,	-1,	1,	-1,	1,	1,	-1,	1,	-1,	1,	1,	-1,	1,	-1,	1,	1,	-1,	1,	-1,	1,	-1,	1	,-1,	1,	-1],
          [-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1	,-1,	1,	-1],
          [-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	-1,	1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	1	,1,	1,	-1],
          [-1,	1,	1, 1, -1, -1,	-1,	-1,	1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	1,	1,	-1]]


def encontrar_mejor_conjunto():

    print(np.dot(letra_j, letra_p))
    print(np.dot(letra_j, letra_t))
    print(np.dot(letra_j, letra_w))
    print(np.dot(letra_p, letra_t))
    print(np.dot(letra_p, letra_w))
    print(np.dot(letra_t, letra_w))


    ort_matrix = np.zeros((26, 26))
    for i in range(len(letras)):
        for j in range(25):
            if np.abs(np.dot(letras[i], letras[j])) <= 7:
                ort_matrix[i][j] = np.dot(letras[i], letras[j])



    print(ort_matrix)
    for i in range(len(letras)):
        count=0
        final_list = []
        list=[]
        for j in range(25):
            if np.abs(ort_matrix[i][j]) <= 3:
                count +=1
                list.append(j)
        if len(list) >=3:
            for k in range(len(list)):
                if ort_matrix[list[0]][list[1]] >= 3:
                    final_list.append(k)

    print(final_list)

def build_W(letra_1, letra_2, letra_3, letra_4):
    #TODO  AcÃ¡ deberia ciclar por 4 letras y sacar W
    K = np.column_stack((letra_1.T, letra_2.T, letra_3.T, letra_4.T))
    W = K.dot(K.T)
    W = W.dot(1/25)
    np.fill_diagonal(W, 0)
    return W

def check_if_patron(current_state, prev_state):
    if np.array_equal(mi_letra_j, current_state):
        print('Encontrado J')
        return False, current_state
    elif np.array_equal(letra_t, current_state):
        print('Encontrado T')
        return False, current_state
    elif np.array_equal(letra_w, current_state):
        print('Encontrado W')
        return False, current_state
    elif np.array_equal(letra_p, current_state):
        print('Encontrado P')
        return False, current_state
    elif np.array_equal(mi_letra_f, current_state):
        print('Encontrado F')
        return False, current_state
    elif np.array_equal(mi_letra_j, current_state):
        print('Encontrado J')
        return False, current_state
    elif np.array_equal(mi_letra_o, current_state):
        print('Encontrado O')
        return False, current_state
    elif np.array_equal(mi_letra_t, current_state):
        print('Encontrado T')
        return False, current_state
    elif np.array_equal(prev_state, current_state):
        print('No encontrado')
        return False, current_state
    return True, current_state

def next_step(state, prev, W):
    state = np.dot(W, state.T)
    state = np.sign(state.T)
    for i in range(len(state[0])):
        if state[0][i] == 0:
            state[0][i] = prev[0][i]
    return state

def mutate_letter(letra, prob):
    for i in range(25):
        if np.random.sample() < prob:
            letra[0][i] = letra[0][i]*(-1)
    return letra

def main():
    # encontrar_mejor_conjunto()
    # Lista de letras
    mi_letra_o =  np.array([[1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1]])
    mi_letra_f = np.array([[-1, 1, 1, 1, -1,-1,1,-1,-1,1,-1,1,1,-1,-1,-1,1,-1,-1,-1,1,1,-1,-1,-1]])
    mi_letra_j =  np.array([[-1,1,1,1,1,-1,-1,-1,1,-1,1,-1,-1,1,-1,-1,1,-1,1,-1,-1,1,1,1,-1]])
    mi_letra_t =  np.array([[1,	1,	1,	1,	1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1]])
    # letra_i = np.array([[-1, 1,	1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1,	-1,	-1,	1, -1, -1, -1, 1, 1, 1,-1]])
    # letra_j = np.array([[-1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, -1]])
    # letra_k = np.array([[-1, 1,	-1,	1, -1, -1, 1, -1, 1, -1, -1, 1,	1, -1, -1, -1, 1, -1, 1, -1, -1, 1, -1,	1, -1]])
    # letra_o = np.array([[-1, -1, 1,	-1,	-1,	-1,	1, -1, 1, -1, -1, 1, -1, 1,	-1,	-1,	1, -1, 1, -1, -1, -1, 1, -1, -1]])


    # Inicializamos todo
    prev_state = letra_j
    current_state = np.array((mutate_letter(copy.deepcopy(letra_j), 0.3)))
    condition = True
    limit = 10
    W = build_W(letra_j, letra_t, letra_w, letra_p)
    first_attempt, trash = check_if_patron(current_state, prev_state)
    if not first_attempt:
        print('Dio de una')
        return
    # Comienzo a iterar
    while condition and limit:
        # Printeo estados
        plt.imshow(copy.deepcopy(current_state).reshape(5, 5), interpolation='nearest', extent=[0.5, 0.5+5, 0.5, 0.5+5], cmap='bwr')
        plt.show()
        # Actualizo y chequeo
        current_state = next_step(current_state, prev_state, W)
        condition, prev_state = check_if_patron(current_state, prev_state)
        limit -= 1

    # Postprocesamiento
    plt.imshow(copy.deepcopy(current_state).reshape(5, 5), interpolation='nearest', extent=[0.5, 0.5+5, 0.5, 0.5+5], cmap='bwr')
    plt.show()
    print("number of iterations = " + str(10-limit))


if __name__ == '__main__':
    main()



#########################################â¹CEMENTERIO>#######################################
# #Letras en vectores
# letra_jota = [[-1, 1, 1, 1, 1], [-1, -1, -1, 1, -1], [-1, -1, -1, 1, -1], [-1, -1, -1, 1, -1], [-1, 1, 1, 1, -1]]
# letra_jota_poco_ruido = [[-1, 1, 1, 1, 1], [-1, -1, -1, 1, -1], [-1, -1, -1, 1, 1], [1, -1, -1, 1, -1], [-1, 1, 1, 1, -1]]
# letra_jota_mucho_ruido = [[1, -1, -1, -1, 1], [-1, 1, 1, 1, -1], [-1, -1, -1, 1, 1], [1, -1, 1, 1, -1], [-1, 1, -1, 1, -1]]

#   -a -b -c -d -e -f -g -h -i -j -k -l -m -n -o -p -q -r -s -t -u -v -w -x -y  -yz
# a
# b
# c 11 25 11 17 13 19 09 09 07 11 17 -9 11 15 11 15 11 13 09 13 13 -9 09 07 13
# d
# e
# f
# g 13 19 17 15 15 25 11 03 09 09 11 -11 13 21 09 17 09 15 07 15 19 -15 07 09 07
# h
# i
# j 09 07 13 11 07 09 11 11 25 09 07 -11 13 09 05 09 09 11 7 15 11 -7 11 17 15
# k
# l
# m
# n 21 11 21 15 15 13 19 03 13 17 15 -19 25 17 17 17 21 7 -1 19 15 -11 15 13 11
# o
# p
# q
# r
# s 11 13 11 13 13 15 09 13 11 11 09 -5 07 11 11 07 11 25 13 09 09 -5 13 15 13
# t -1 09 03 09 09 07 01 21 07 03 05 07 -1 03 07 -1 03 13 25 01 05 -1 05 07 13
# u
# v
# w
# x
# y
# z

# print(np.dot(letra_j, letra_k))
# print(np.dot(letra_k, letra_i))
# print(np.dot(letra_j, letra_o))
# print(np.dot(letra_k, letra_i))
# print(np.dot(letra_k, letra_o))
# print(np.dot(letra_i, letra_o))
# print(np.dot(letra_j, letra_i))
# print('000')
# print(np.dot(letra_j, letra_h))
# print(np.dot(letra_j, letra_i))
# print(np.dot(letra_j, letra_j))
# print(np.dot(letra_j, letra_k))
# print(np.dot(letra_j, letra_l))
# print(np.dot(letra_j, letra_m))
# print(np.dot(letra_j, letra_n))
# print(np.dot(letra_j, letra_o))
# print(np.dot(letra_j, letra_p))
# print(np.dot(letra_j, letra_q))
# print(np.dot(letra_j, letra_r))
# print(np.dot(letra_j, letra_s))
# print(np.dot(letra_j, letra_t))
# print(np.dot(letra_j, letra_u))
# print(np.dot(letra_j, letra_v))
# print(np.dot(letra_j, letra_w))
# print(np.dot(letra_j, letra_x))
# print(np.dot(letra_j, letra_y))
# print(np.dot(letra_j, letra_z))

    # letras = [[-1, -1, 1, -1, -1 , -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1],
    #           [-1, 1, 1, -1, -1, -1, 1,	-1, 1, -1, -1, 1, 1, -1, -1, -1, 1,	-1,	1, -1, -1, 1, 1, -1, -1],
    #           [-1, -1, 1, 1, -1, -1, 1, -1,	-1,	-1,	-1,	1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1],
    #           [-1, 1, 1, -1, -1, -1, 1, -1,	1, -1, -1, 1, -1, 1, -1, -1, 1, -1,	1, -1, -1, 1, 1, -1, -1],
    #           [-1, 1, 1, 1, -1,	-1,	1, -1, -1, -1, -1, 1, 1, 1, -1,	-1,	1, -1, -1, -1, -1, 1, 1, 1,	-1],
    #           [-1, 1, 1, 1,	-1,	-1,	1, -1, -1, -1, -1, 1, 1, 1,	-1,	-1,	1, -1, -1, -1, -1, 1, -1, -1, -1],
    #           [-1,	-1,	1,	1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	-1,	1,	-1,	-1],
    #           [-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1],
    #           [-1,	1,	1,	1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	1,	1,	1,	-1],
    #           [-1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, -1],
    #           [-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1],
    #           [-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	1,	1,	-1],
    #           [-1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1],
    #           [-1,	1, 1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1],
    #           [-1,	-1,	1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	-1,	1,	-1,	-1],
    #           [-1,	1,	1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1],
    #           [-1,	-1,	1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	-1,	1,	1	,1],
    #           [-1,	1,	1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1],
    #           [-1,	-1,	1,	1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	1,	1,	-1,	-1],
    #           [-1,	1,	1,	1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1],
    #           [-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1	,1,	1	,-1],
    #           [-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	-1	,1,	-1,	-1],
    #           [1,	-1,	1,	-1,	1,	1,	-1,	1,	-1,	1,	1,	-1,	1,	-1,	1,	1,	-1,	1,	-1,	1,	-1,	1	,-1,	1,	-1],
    #           [-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1,	1	,-1,	1,	-1],
    #           [-1,	1,	-1,	1,	-1,	-1,	1,	-1,	1,	-1,	-1,	-1,	1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	1	,1,	1,	-1],
    #           [-1,	1,	1, 1, -1, -1,	-1,	-1,	1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	1,	-1,	-1,	-1,	-1,	1,	1,	1,	-1]]